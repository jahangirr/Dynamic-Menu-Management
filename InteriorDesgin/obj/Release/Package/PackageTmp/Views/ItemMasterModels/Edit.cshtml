@model SilGlobalFashion.Models.ItemMasterModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Item Create</h2>

@using (Html.BeginForm("Edit", "ItemMasterModels", FormMethod.Post, new { @enctype = "multipart/form-data", @id = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal alert-info">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.ItemCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Hidden("Id", ViewBag.Id as string)
                @Html.TextBox("ItemCodeShow", ViewBag.ItemCode as string, htmlAttributes: new { disabled = "disabled", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ItemCode, "", new { @class = "text-danger" })
                @Html.Hidden("ItemCode", ViewBag.ItemCode as string)

            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.ItemName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.ItemName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ItemName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ItemType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.ItemType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ItemType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <table width="100%">
                <tr>
                    <td width="50%">

                        @Html.LabelFor(model => model.ItemDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-5">

                            @Html.TextAreaFor(model => model.ItemDescription, 10, 55, null)
                            @Html.ValidationMessageFor(model => model.ItemDescription, "", new { @class = "text-danger" })

                        </div>


                    </td>
                    <td width="50%">

                        <div class="alert-success">

                            @{
                                HtmlString HSFileAddressInfo = new HtmlString(ViewBag.FileAddressInfo as string);
                            }

                            
                            

                            <img id="imp_preview" alt="your image" width="300" height="300" src="~/Content/Uploads/Originals/@HSFileAddressInfo" />

                            <input type="file"  name="Image" onchange="document.getElementById('imp_preview').src = window.URL.createObjectURL(this.files[0])">

                        </div>

                    </td>
                </tr>
            </table>

        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.UOM, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.UOM, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UOM, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UsingArea, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.UsingArea, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UsingArea, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="control-label col-md-2"> Product HS Code </div>
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.ProductHSCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductHSCode, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Modify" class="btn btn-default" />
            </div>
        </div>
    </div>
}


<script type="text/javascript">

    $(document).ready(function () {


        $(document).on('submit', 'form', function () {
            var buttons = $(this).find('[type="submit"]');
            if ($(this).valid()) {
                buttons.each(function (btn) {
                    $(buttons[btn]).prop('disabled', true);
                });
            } else {
                buttons.each(function (btn) {
                    $(buttons[btn]).prop('disabled', false);
                });
            }
        });

        $("#ItemType").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetItemType")',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        ItemType: $('#ItemType').val()
                        },
                    success: function (data) {

                        response($.map(data, function (value, index) {
                            //alert(index);
                            return {
                                label: value,
                                value: value
                            }
                        })
                        );
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        //debugger;
                        alert(textStatus);
                    }
                });
            } ,
            minLength: 1,
            select: function (event, ui) {
                // Do something with  "ui.item.Id" or "ui.item.Name" or any of the other properties you selected to return from the action
            }
        });


        $("#UOM").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetUOM")',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        UOM: $('#UOM').val()
                    },
                    success: function (data) {

                        response($.map(data, function (value, index) {
                            //alert(index);
                            return {
                                label: value,
                                value: value
                            }
                        })
                        );
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        //debugger;
                        alert(textStatus);
                    }
                });
            },
            minLength: 1,
            select: function (event, ui) {
                // Do something with  "ui.item.Id" or "ui.item.Name" or any of the other properties you selected to return from the action
            }
        });


        $("#UsingArea").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetUsingArea")',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        UsingArea: $('#UsingArea').val()
                    },
                    success: function (data) {

                        response($.map(data, function (value, index) {
                            //alert(index);
                            return {
                                label: value,
                                value: value
                            }
                        })
                        );
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        //debugger;
                        alert(textStatus);
                    }
                });
            },
            minLength: 1,
            select: function (event, ui) {
                // Do something with  "ui.item.Id" or "ui.item.Name" or any of the other properties you selected to return from the action
            }
        });


    });
</script>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
