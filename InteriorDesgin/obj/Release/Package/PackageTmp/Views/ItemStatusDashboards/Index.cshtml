@model PagedList.IPagedList<SilGlobalFashion.Models.ItemStatusDashboard>
@using PagedList.Mvc;

@using SilGlobalFashion.Repository;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

<link href="~/Content/BlinkCss.css" rel="stylesheet" />

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    Html.RenderPartial("MenuView");
    ViewBag.Title = "Item Status";
}

<div class="alert-success" style="visibility:hidden;">

    <button id="currencyRateShowOrHide" name="currencyRateShowOrHide" class="btn-danger"> Currency Rate Zone</button>

    <div class="alert-warning" id="curZone">


        <div class="form-group">

            <div class="control-label col-md-2" style="color:red">
                From Currency :
            </div>

            <div class="col-md-10">
                @Html.TextBox("CurFrom")

            </div>


            <div class="control-label col-md-2" style="color:red">
                To Currency :
            </div>



            <div class="col-md-10">
                @Html.TextBox("CurTo")

            </div>

            <div class="col-md-10">

                <button id="getExchangeRate" class="btn-success">Get Rate</button>
            </div>



            <div id="curRestult" class="alert-success" style="color:black;">


            </div>
        </div>


    </div>

</div>

<script type="text/javascript">

    $(document).ready(function () {

        $("#currencyRateShowOrHide").click(function () {
            $("#curZone").toggle();
        });

        $("#getExchangeRate").click(function () {

            $.ajax({
                url: '@Url.Action("getData")',
                type: "GET",
                dataType: "JSON",
                data: {
                    from: $('#CurFrom').val(),
                    to: $('#CurTo').val()
                },
                success: function (data) {

                    $('#curRestult').text(data.exchangeRate);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //debugger;
                    alert(textStatus);
                }
            });
        });
    });

</script>






<link href="~/Content/TableStyle.css" rel="stylesheet" />
<h2>Dashboard </h2>






<div class="alert-primary" style="color:black;">

    <style>
        tr.highlighted td {
            background-color: salmon;
        }
    </style>


    @using (Html.BeginForm("Index", "ItemStatusDashboards", FormMethod.Get))
    {


        <div>

        </div>


        <table>
            <tr>
                <td width="30%">


                    Select Parameter : @Html.DropDownList("selectionItems", (SelectList)ViewBag.selectionItems)


                    <input type="submit" value="Search" class="btn-danger" />
                    <input type="button" value="Reset" class="btn-success" id="bReset" />

                </td>
                <td width="70%">

                    <div id="selectionDivToShow" style="border:dotted; color:black; background-color:Highlight;">

                    </div>
                </td>
            </tr>
        </table>





        <p>
            <table id="SearchInfoTable" class="table" style="color:black;">
                <tr>

                    <td>
                        Find by Approve Process Name: @Html.TextBox("ItemType", ViewBag.ItemType as string)

                    </td>


                </tr>

                <tr>

                    <td>
                        @{

                            GlobCreatedFunction globbCreFunc = new GlobCreatedFunction();

                            DateTime? VeiwBagAsOnDate = null;

                            try
                            {
                                VeiwBagAsOnDate = Convert.ToDateTime(globbCreFunc.GetDate(ViewBag.AsOnDate));


                            }
                            catch (Exception ex)
                            {

                            }




                        }
                        Find by As On Date : @Html.TextBox("AsOnDate", ViewBag.AsOnDate as string, new { @readonly = "readonly" })

                    </td>

                </tr>


                <tr>
                    <td>
                        Find by Item Name : @Html.TextBox("NameOfItem", ViewBag.NameOfItem as string)
                    </td>

                </tr>

                <tr>
                    <td>
                        Find by Dashboard SL : @Html.TextBox("DashboardVersion", ViewBag.DashboardVersion as string)
                    </td>

                </tr>





                <tr>
                    <td>
                        <input type="submit" value="Search" />
                    </td>

                </tr>

            </table>



        </p>
                            }

</div>




<script type="text/javascript">
    $(document).ready(function () {



        $("#NameOfItem").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetItemName")',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        ItemName: $('#NameOfItem').val()
                    },
                    success: function (data) {

                        response($.map(data, function (value, index) {
                            //alert(index);
                            return {
                                label: value,
                                value: value
                            }
                        })
                        );
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        //debugger;
                        alert(textStatus);
                    }
                });
            },
            minLength: 1,
            select: function (event, ui) {
                // Do something with  "ui.item.Id" or "ui.item.Name" or any of the other properties you selected to return from the action
            }
        });




        $("#ItemType").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetItemType")',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        ItemType: $('#ItemType').val()
                    },
                    success: function (data) {

                        response($.map(data, function (value, index) {
                            //alert(index);
                            return {
                                label: value,
                                value: value
                            }
                        })
                        );
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        //debugger;
                        alert(textStatus);
                    }
                });
            },
            minLength: 1,
            select: function (event, ui) {
                // Do something with  "ui.item.Id" or "ui.item.Name" or any of the other properties you selected to return from the action
            }
        });




        $("#DashboardVersion").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetDashboardVersion")',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        DashboardVersion: $('#DashboardVersion').val()
                    },
                    success: function (data) {

                        response($.map(data, function (value, index) {
                            //alert(index);
                            return {
                                label: value,
                                value: value
                            }
                        })
                        );
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        //debugger;
                        alert(textStatus);
                    }
                });
            },
            minLength: 1,
            select: function (event, ui) {
                // Do something with  "ui.item.Id" or "ui.item.Name" or any of the other properties you selected to return from the action
            }
        });





        $('#bReset').click(function () {


            $('#ItemType').val('');
            //$('#AsOnDate').val('');
            $('#NameOfItem').val('');
            $('#DashboardVersion').val('');





            sessionStorage.setItem("ItemDashBoard_ItemType", '');
            sessionStorage.setItem("ItemDashBoard_DashboardVersion", '');
            sessionStorage.setItem("ItemDashBoard_NameOfItem", '');

            sessionStorage.setItem("ItemDashBoard_AsOnDate", '');



        });


        var ItemDashBoard_DashboardVersion_value = sessionStorage.getItem("ItemDashBoard_DashboardVersion");
        if (ItemDashBoard_DashboardVersion_value == null) {
            sessionStorage.setItem("ItemDashBoard_DashboardVersion", '');
        } else {
            sessionStorage.setItem("ItemDashBoard_DashboardVersion", ItemDashBoard_DashboardVersion_value);
        }

        var ItemDashBoard_NameOfItem_value = sessionStorage.getItem("ItemDashBoard_NameOfItem");
        if (ItemDashBoard_NameOfItem_value == null) {
            sessionStorage.setItem("ItemDashBoard_NameOfItem", '');
        } else {
            sessionStorage.setItem("ItemDashBoard_NameOfItem", ItemDashBoard_NameOfItem_value);
        }




        var ItemDashBoard_ItemType_value = sessionStorage.getItem("ItemDashBoard_ItemType");
        if (ItemDashBoard_ItemType_value == null) {
            sessionStorage.setItem("ItemDashBoard_ItemType", '');
        } else {
            sessionStorage.setItem("ItemDashBoard_ItemType", ItemDashBoard_ItemType_value);
        }




        var ItemDashBoard_AsOnDate_value = sessionStorage.getItem("ItemDashBoard_AsOnDate");
        if (ItemDashBoard_AsOnDate_value == null) {
            sessionStorage.setItem("ItemDashBoard_AsOnDate", '');
        } else {
            sessionStorage.setItem("ItemDashBoard_AsOnDate", ItemDashBoard_AsOnDate_value);
        }


        $('#DashboardVersion').change(function () {

            sessionStorage.setItem("ItemDashBoard_DashboardVersion", $('#DashboardVersion').val());
        });

        $('#NameOfItem').change(function () {

            sessionStorage.setItem("ItemDashBoard_NameOfItem", $('#NameOfItem').val());
        });

        $('#ItemType').change(function () {

            sessionStorage.setItem("ItemDashBoard_ItemType", $('#ItemType').val());
        });

        $('#AsOnDate').change(function () {

            sessionStorage.setItem("ItemDashBoard_AsOnDate", $('#AsOnDate').val());
        });






        $("#SearchInfoTable tr").each(function () {
            $(this).hide();
        });

        $("#selectionItems").change(function () {

            $("#SearchInfoTable tr").each(function () {
                var row_index = $(this).index();
                var ddlValue = $("#selectionItems").val();
                if (ddlValue.toString() == row_index.toString()) {
                    $(this).show();
                }
                else {
                    $(this).hide();
                }

            });



            var DashboardVersion = sessionStorage.getItem("ItemDashBoard_DashboardVersion");
            var NameOfItem = sessionStorage.getItem("ItemDashBoard_NameOfItem");
            var ItemType = sessionStorage.getItem("ItemDashBoard_ItemType");
            var AsOnDate = sessionStorage.getItem("ItemDashBoard_AsOnDate");




            var ListOfSelectedValue = 'Item Name :' + NameOfItem + '||  Dashboard SL : ' + DashboardVersion + '||  Approve Process Name : ' + ItemType + '||  As Of  Date : ' + AsOnDate;

            $('#selectionDivToShow').html(ListOfSelectedValue.toString());


        });




    });
</script>



<table class="table-bordered"  id="DashBoardTable" style="background-color:#C0C0C0;border:2px; border-color:blue;color:black;">
    <tr>
        <th>
            Store_Location
        </th>
        <th>
            Approve_____Process_______Name
        </th>
        <th>
            As_On_Date
        </th>
        <th>
            Item_________Name
        </th>
        <th width="100px;">

            Supplier_____Name
        </th>
        <th>
            Total_Stock_In_Unit
        </th>
        <th>
            Give_Loan_Balance
        </th>
        <th>
            Take_Loan_Balance
        </th>
        <th>
            Net_Total_Stock_In_Unit
        </th>
        <th>
            Monthly Average Consumption
        </th>
        <th>
            Monthly Maximum Consumption
        </th>
        <th>
            Stock Available Days
        </th>
        <th>
            Total_Stock_Run_Out_Date
        </th>
        <th>
            Reorder_Date
        </th>
        <th>
            Rate_Per_In_Unit
        </th>
        <th>
            Loan_Position
        </th>
        <th>
            Present_Stock_With_SPR_Qty
        </th>

        <th>
            Reorder_Level
        </th>
        <th>
            SPR_Quantity
        </th>
        <th>
            SPR_Date___
        </th>
        <th>
            Lead_Time_Days
        </th>
        <th>
            Stock_Value
        </th>
        <th>
            Month Upto Date Consumption In Unit
        </th>
        <th>
            Month Upto Date Consumption (Value)
        </th>
        <th>
            Last Date Consumption In Unit
        </th>
        <th>
            Last Date Consumption (Value)
        </th>
        <th>
            Remarks
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.StoreLocation)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ItemType)
            </td>
            <td>
                <span class="IdAsOnDate">
                    @Html.DisplayFor(modelItem => item.AsOnDate)
                </span>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NameOfItem)
            </td>
            <td width="100px;">
                @if (item.SupplierName != null && item.SupplierName.Length > 0)
                {
                    string tempString = "";
                    if (item.SupplierName.Length < 13)
                    {
                        tempString = item.SupplierName.ToString().Substring(0, item.SupplierName.Length);
                    }
                    else
                    {
                        tempString = item.SupplierName.ToString().Substring(0, 12);
                    }

                    HtmlString suppHtmlString = new HtmlString(tempString);
                    @suppHtmlString

                }

                @if (item.SupplierName != null)
                {
                    <a onclick="return confirm('@item.SupplierName');">More..</a>
                }

            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalStockKg)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.GiveLoanBalance)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TakeLoanBalance)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NetTotalStockKg)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MonthlyAvgConsump)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MonthlyMaxConsump)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StockAvailDays)
            </td>
            <td>
                <span class="IdTotalStockRunOutDate">
                    @Html.DisplayFor(modelItem => item.TotalStockRunOutDate)
                </span>

            </td>
            <td>
                @*checking whether reorder is placed that to be made in combination of the lower condition..*@
                @if (item.ReorderDate != null && DateTime.Now > item.ReorderDate && (item.ReorderDate.Value.Date != Convert.ToDateTime("1900-01-01 00:00:00.000")))
                {
                    var reOrderDateToBePrinted = Convert.ToDateTime(item.ReorderDate).ToString("dd-MM-yyyy");
                    <div class="attention">
                        @reOrderDateToBePrinted
                    </div>
                }
                else
                {
                    <span class="IdReorderDate">
                        @Html.DisplayFor(modelItem => item.ReorderDate)
                    </span>

                }

            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RateBdtPerKg)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LoanPosition)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PreStockWithSprQty)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.ReorderLavel)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SPRQuantity)
            </td>
            <td>
                <span class="IdSPRDate">

                    @Html.DisplayFor(modelItem => item.SPRDate)

                </span>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LeadTimeDays)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StockValueBDT)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MonthUptoDateConsumptionKg)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MonthUptoDateConsumptionBDT)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastDateConsumptionKG)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastDateConsumptionBDT)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Remarks)
            </td>
            <td>

                @Html.ActionLink("Details", "Details", new { id = item.Id })

            </td>
        </tr>
                                }

</table>

<div>
    *****
    * Give Loan Balance - As per Safe Side Staying policy(Inventory Management), Give Loan Balance is deducted from Total Stock in place of adding while showing  Net_Total_Stock_(Kg).
    * If any lot is given approved by anyone on Item Receive  through approve process , we consider it to have its effect on Item Dashbord.

</div>


Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index", new { page, ItemType = ViewBag.ItemType, AsOnDate = ViewBag.AsOnDate, NameOfItem = ViewBag.NameOfItem, DashboardVersion = ViewBag.DashboardVersion }))


<script type="text/javascript">

    $(document).ready(function () {


        var spansIdAsOnDate = document.getElementsByClassName("IdAsOnDate");



        for (i = 0; i < spansIdAsOnDate.length; i++) {
            var AsOnDate = spansIdAsOnDate[i].innerHTML;
            console.log(AsOnDate);
            console.log(AsOnDate.trim().length);
            if (AsOnDate.trim().length > 9) {
                var DateToShowAsOnDate = AsOnDate.trim().substring(0, 10);
                console.log(DateToShowAsOnDate);
                if (DateToShowAsOnDate == '01-01-1900') {
                    spansIdAsOnDate[i].innerHTML = '';
                } else {
                    spansIdAsOnDate[i].innerHTML = DateToShowAsOnDate;
                }
            }

        }


        var spansIdTotalStockRunOutDate = document.getElementsByClassName("IdTotalStockRunOutDate");

        for (i = 0; i < spansIdTotalStockRunOutDate.length; i++) {
            var TotalStockRunOutDate = spansIdTotalStockRunOutDate[i].innerHTML;

            if (TotalStockRunOutDate.trim().length > 9) {
                var DateToShowTotalStockRunOutDate = TotalStockRunOutDate.trim().substring(0, 10);
                console.log(DateToShowTotalStockRunOutDate);
                if (DateToShowTotalStockRunOutDate == '01-01-1900') {
                    spansIdTotalStockRunOutDate[i].innerHTML = '';
                } else {
                    spansIdTotalStockRunOutDate[i].innerHTML = DateToShowTotalStockRunOutDate;
                }
            }

        }


        var spansIdReorderDate = document.getElementsByClassName("IdReorderDate");

        for (i = 0; i < spansIdReorderDate.length; i++) {
            var ReorderDate = spansIdReorderDate[i].innerHTML;
            if (ReorderDate.trim().length > 9) {
                var DateToShowReorderDate = ReorderDate.trim().substring(0, 10);
                console.log(DateToShowReorderDate);
                if (DateToShowReorderDate == '01-01-1900') {
                    spansIdReorderDate[i].innerHTML = '';
                } else {
                    spansIdReorderDate[i].innerHTML = DateToShowReorderDate;
                }
            }

        }


        var spansIdSPRDate = document.getElementsByClassName("IdSPRDate");

        for (i = 0; i < spansIdSPRDate.length; i++) {
            var SPRDate = spansIdSPRDate[i].innerHTML;
            if (SPRDate.trim().length > 9) {
                var DateToShowSPRDate = SPRDate.trim().substring(0, 10);
                console.log(DateToShowSPRDate);
                if (DateToShowSPRDate == '01-01-1900') {
                    spansIdSPRDate[i].innerHTML = '';
                } else {
                    spansIdSPRDate[i].innerHTML = DateToShowSPRDate;
                }
            }

        }



        $('#DashBoardTable tr').click(function (e) {
            $('#DashBoardTable tr').removeClass('highlighted');
            $(this).addClass('highlighted');
        });


        $('#DashBoardTable').on('click', 'tbody tr', function (event) {
            $(this).addClass('highlight').siblings().removeClass('highlight');
        });








    });
</script>




