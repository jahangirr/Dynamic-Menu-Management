@model SilGlobalFashion.Models.ItemReciveFinancialAspect
@using SilGlobalFashion.Repository;

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>ItemReciveFinancialAspect</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.MRRNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MRRNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MRRNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">


            @{

                DateTime? MRRDate = null;
                try
                {
                    GlobCreatedFunction globbCreFunc = new GlobCreatedFunction();
                    MRRDate = Convert.ToDateTime(globbCreFunc.GetDate(ViewBag.MRRNo));

                }
                catch (Exception ex)
                {

                }
            }

            <div class="control-label col-md-2"> MRR Date: </div> 
            <div class="col-md-10">

                <div class="form-control"> @Html.JQueryUI().Datepicker("MRRDate", MRRDate) </div>
            </div>

                
            </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsAdd, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsAdd)
                    @Html.ValidationMessageFor(model => model.IsAdd, "", new { @class = "text-danger control-label col-md-4" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TransName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TransName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TransName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TransPercentage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TransPercentage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TransPercentage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DirectAmount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DirectAmount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DirectAmount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
